// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      this.set('playerTotalScore', 0);
      this.set('dealerTotalScore', 0);
      return this.start();
    };

    App.prototype.start = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('dealerHand').on('compareScore', this.compare, this);
      this.get('playerHand').on('bust', this.compare, this);
      return this.get('playerHand').on('blackjack', this.blackjack, this);
    };

    App.prototype.compare = function() {
      var dealerHandScore, playerHandScore;
      playerHandScore = this.maxScore('playerHand');
      dealerHandScore = this.maxScore('dealerHand');
      if (playerHandScore > 21) {
        this.trigger('showMessage:dealerWon');
        this.set('playerTotalScore', this.get('playerTotalScore') - 1);
        return this.trigger('gameEnded');
      } else if (dealerHandScore > playerHandScore && dealerHandScore <= 21) {
        this.trigger('showMessage:dealerWon');
        this.set('playerTotalScore', this.get('playerTotalScore') - 1);
        return this.trigger('gameEnded');
      } else {
        this.trigger('showMessage:playerWon');
        this.set('playerTotalScore', this.get('playerTotalScore') + 1);
        return this.trigger('gameEnded');
      }
    };

    App.prototype.maxScore = function(person) {
      if (this.get(person).scores().length > 1) {
        if (this.get(person).scores()[1] < 22) {
          return this.get(person).scores()[1];
        } else {
          return this.get(person).scores()[0];
        }
      } else {
        return this.get(person).scores()[0];
      }
    };

    App.prototype.blackjack = function() {
      this.trigger('showMessage:playerWon');
      return this.trigger('gameEnded');
    };

    return App;

  })(Backbone.Model);

}).call(this);
