// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      this.start();
      this.get('dealerHand', this).on('compareScore', (function(_this) {
        return function() {
          var dealerScore, playerScore;
          playerScore = Math.max(_this.get('playerHand').scores());
          dealerScore = Math.max(_this.get('dealerHand').scores());
          if (dealerScore > playerScore && dealerScore <= 21) {
            return alert("Sorry, dealer wins");
          } else {
            return alert("You win");
          }
        };
      })(this));
      this.get('playerHand', this).on('winner', (function(_this) {
        return function() {
          alert(_this.get('playerHand').name() + "won!");
          return _this.start();
        };
      })(this));
      return this.get('playerHand', this).on('startnow', (function(_this) {
        return function() {
          return _this.start();
        };
      })(this));
    };

    App.prototype.start = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      return this.get('playerHand').on('bust', this.start, this);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
